import{H as i,N as o}from"./Navbar-C-QiNICq.js";import{_ as r,c as l,a as e,b as p,F as d,d as c,r as a,o as h}from"./app-C61jTV-o.js";const u={data(){return{pageTitle:"Home"}},components:{Header:i,Navbar:o}},m={class:"app-container__main"},_=c('<div class="app-container__page"><div class="info-panel"><p> This application was built using the PHP framework <a href="https://laravel.com/" target="_blank">Laravel</a> and uses <a href="https://vuejs.org/" target="_blank">Vue.js</a> for handling the front-end. </p><p> Laravel is used to permanently store album information, as well as provide access to the remote Artist Data API using a library called GuzzleHTTP. </p><p> Data is passed between the Vue front-end and the Laravel API endpoints using Axios. Although URL paths are shown in the browser&#39;s address bar - the Vue Router intercepts navigation events triggered by the user and dynamically updates the DOM to display the requested page. </p><p> I deliberately decided not to permanently store any of the artist information anywhere in the site; this means whenever you seen any data pertaining to an artist, it has been fetched over the network. This can *sometimes* cause the &#39;Albums&#39; index page to take a while to load as the provided API endpoint likes to take a while to respond sometimes. If this was a real-world application it would make sense to either store the artist information in a DB or use Laravel&#39;s built-in caching functionality. </p><hr><p>List of technologies used:</p><ul><li>PHP</li><li>Vue 3</li><li>Axios</li><li>GuzzleHTTP</li><li>Vite</li><li>Sass</li></ul></div></div>',1);function f(g,v,b,w,t,y){const s=a("Navbar"),n=a("Header");return h(),l(d,null,[e(s),p("div",m,[e(n,{pagename:t.pageTitle},null,8,["pagename"]),_])],64)}const P=r(u,[["render",f]]);export{P as default};
